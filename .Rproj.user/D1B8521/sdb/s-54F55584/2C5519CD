{
    "contents" : "library(Rsamtools)\nlibrary(XML)\nlibrary(biomaRt)\n\nsrc<-function(){source('C:/Users/dwitonsk/Dropbox/DataViz/ahga.R')}\n\nfa= Rsamtools::FaFile(\"http://genome-data.cri.uchicago.edu/ahga/ref/hg19_all_contigs.fa\")\nfa2= Rsamtools::FaFile(\"http://genome-data.cri.uchicago.edu/ahga/ref/hg19_all_contigs.2.fa\")\n\n#bam=scanBam(\"http://genome-data.cri.uchicago.edu/ahga/archdata/RISE98.hg19.flt.sort.rmdup.realign.md.bam\",param=param)\n\nassign(\"ALLELES\", c(\"A\", \"G\", \"C\", \"T\"), envir = .GlobalEnv)\nassign(\"CHR_PREFIX\", c(\"B37\" = \"chr\",\"B37.2\" = \"\",\"B36\" = \"chr\"), envir = .GlobalEnv)\n#--------------------------------------------------\n#assign(\"PERIODS\", c(\"lower paleolithic\", \"middle paleolithic\", \"upper paleolithic\", \"mesolithic\", \"neolithic\",\\\n#\"chalcolithic\", \"bronze age\", \"iron age\" = IRanges(300, 1500), envir = .GlobalEnv)\n\n#assign(\"NEOLITHIC_CULTURES_FERTILE_CRESCENT\", c(\"heavy\", \"shepherd\", \"trihedral\", \"pre-pottery\", \"qaraoun\", \"tahunian\", \"yarmukian\",\n#\"halaf\", \"halaf-ubaid\", \"ubaid\", \"byblos\", \"jericho\", \"tell aswad\", \"catalhoyuk\", \"jarmo\"), envir = .GlobalEnv)\n#assign(\"NEOLITHIC_CULTURES_EUROPE\", c(\"boian\", \"butmir\", \"cernavoda\", \"cotofeni\", \"cucuteni-trypillian\", \"dudesti\", \"gornesti\", \"gumelnita-karanovo\",\n#\"hamangia\", \"linear pottery\", \"malta\", \"petresti\", \"sesklo\", \"tisza\", \"tiszapolgar\", \"usatovo\", \"varna\", \"vinca\", \"vucedol\",\n#\"neolithic transylvania\", \"neolithic southeastern europe\"), envir = .GlobalEnv)\n#assign(\"NEOLITHIC_CULTURES_CHINA\", c(\"peilgang\", \"pengtoushan\", \"beixin\", \"cishan\", \"dadiwan\", \"houli\", \"xinglongwa\", \"xinle\",\n#\"zhaobaogou\", \"hemudu\", \"daxi\", \"majiabang\", \"yangshao\", \"hongshan\", \"dawenkou\", \"songze\", \"liangzhu\", \"majiayao\", \"qujialing\",\n#\"longshan\", \"baodun\", \"shijiahe\", \"yueshi\", \"tibet\"), envir = .GlobalEnv)\n#assign(\"NEOLITHIC_CULTURES_SOUTH_ASIA\", c(\"mehrgarh\"), envir = .GlobalEnv)\n\n\n\n#' @export getAHGAXML\ngetAHGAXML <- function(archive = \"ahga\", refresh = FALSE) {\n  xmlroot <- attr(getAHGAXML, \"xmlroot\")\n  if (refresh || is.null(xmlroot)) {\n    xmlfile <- XML::xmlParse(\"http://genome-data.cri.uchicago.edu/ahga/ancient_tibetans.xml\")\n    xmlroot <- XML::xmlRoot(xmlfile)\n    }\n  attr(getAHGAXML, \"xmlroot\") <<- xmlroot\n  return(xmlroot)\n}\n\n#' @export getSite\ngetSite <- function(samples, chr, pos) {\n  #------remove samples which are not mapped to autosomal chromosomes\n  n <- which(sapply(as.character(samples[,\"path\"]),grep,pattern=\"chM\") == 1)\n  if (length(n) > 0)\n    samples <- samples[-n,]\n  #---------------------------------------------------------------------\n  sam <- NULL\n  for (i in 1:nrow(samples)) {\n    sam <- rbind(sam, getAlleleCnts(samples[i, ], chr, pos))\n  }\n  rownames(sam) <- rownames(samples)\n  sam  <- data.frame(cbind(samples[, c(\"name\", \"age\")]), sam)\n  sam  <- orderAges(sam, by = \"end\")\n  #sam <- rbind(sam, total)\n  return(sam)\n}\n\ngetAlleleCnts <- function(samp, chr, pos) {\n  message(paste0(\"generating pileup for sample \", rownames(samp), \" \", samp[, \"name\"]))\n  chr   <- paste0(CHR_PREFIX[as.character(samp$build)], chr)\n  which <- GenomicRanges::GRanges(seqnames = chr, IRanges::IRanges(pos, pos))\n  param <- Rsamtools::ScanBamParam(which = which)\n  pileupparam <- Rsamtools::PileupParam(distinguish_strands = FALSE, min_nucleotide_depth = 0)\n  path  <- as.character(samp[, \"path\"])\n  res <- suppressWarnings(Rsamtools::pileup(path, index = path, scanBamParam = param, pileupParam = pileupparam))\n  #print(res)\n  cnt <- c(0, 0, 0, 0)\n  names(cnt) <- ALLELES\n  if (length(res$nucleotide) > 0) {\n    for (j in 1:length(res$nucleotide)) {\n      cnt[as.character(res$nucleotide[j])] <- res$count[j]\n    }\n  }\n  #print(cnt)\n  return(cnt)\n}\n\n\n\n#Returns the counts of samples\ncountAlleles <- function(res) {\n  if (nrow(res) == 1) {\n    m <- as.numeric(as.character(res[, ALLELES]))\n\t  t <- sign(m)\n\t  names(t) <- ALLELES\n  }\n  else {\n    m <- sapply(res[,ALLELES],function(x){as.numeric(as.character(x))})\n    t <- apply(m[,ALLELES] > 0, 2, sum)\n   }\n   return(t)\n}\n\n#Returns list of major and minor alleles\ngetMajMinAlleles <- function(basecount) {\n  cnts <- countAlleles(basecount)\n  cnts <- cnts[order(cnts)]\n  maj_min <- c(\"NA\", \"NA\")\n  if (cnts[4] > 0)\n    maj_min[1] <- names(cnts[4])\n  if (cnts[3] > 0)\n    maj_min[2] <- names(cnts[3])\n  return (maj_min)\n}\n\n#Retrieves AHGA publications and shows number of samples in each\n#' @export getAHGAPubs\ngetAHGAPubs <- function() {\n  xmlroot <- getAHGAXML()\n  s <- XML::xmlSApply(xmlroot,xmlAttrs)\n  pubs <- sapply(s, function(x){x[\"name\"]})\n  counts <- XML::xmlSApply(xmlroot, xmlSize)\n  pubs <- cbind(data.frame(pubs), counts)\n  colnames(pubs) <- c(\"Publication\", \"#Samples\")\n  return(pubs)\n}\n\n#' @export selectPubs\nselectPubs <- function(ageL = 0, ageH = 99999999, samples = NULL) {\n  dash <- 50\n  pubs <- getAHGAPubs()\n  p <- paste0(pubs[, \"Publication\"], \" (\", pubs[, \"#Samples\"], \")\")\n  allpubs <- paste0(\"All Publications (\", sum(pubs[, \"#Samples\"]), \")\")\n  p <- c(p, allpubs)\n  c <- select.list(p, multiple = TRUE, title = \"AHGA Publications (#Samples)\")\n  if (sum(c %in% allpubs) == 1)\n    c <- p[-length(p)]\n  j <- paste0(\"    \", c,\"\\n\")\n  message(rep(\"-\", dash))\n  message(\"Publications selected:\")\n  message(j, appendLF = FALSE)\n  message(rep(\"-\", dash))\n  flush.console()\n  samps <- getAllSamples(which(p %in% c), ageL = ageL, ageH = ageH, paths= TRUE)\n  t <- paste0(rownames(samps), \" \", samps[, \"name\"], \" [\", samps[, \"age\"], \"]\")\n\n  allsamps <- \"All Samples\"\n  t <- c(t, allsamps)\n\n    u <- select.list(t, multiple = TRUE, title = \"AHGA Samples [age]\")\n  if (sum(u %in% allsamps) == 1)\n    u <- t[-length(t)]\n  j <- paste0(\"    \", u, \"\\n\")\n  message(rep(\"-\", dash))\n  message(paste0(length(j), \" sample\", ifelse(length(j) == 1, \"\", \"s\"), \" selected:\"))\n  sapply(j, message, appendLF = FALSE)\n  message(rep(\"-\", dash))\n  flush.console()\n  samps <- samps[which(t %in% u), ]\n  return(samps)\n}\n\n#Gets samples from a publication given publication index\n#' @export getSamples\ngetSamples <-function(pubindx, build = \"B37\", ageL = 0, ageH = 9999999, paths = FALSE){\n  xmlroot <- getAHGAXML()\n  xmlchildren <- XML::xmlChildren(xmlroot)\n  dateRange <- IRanges::IRanges(ageL, ageH)\n  a <- XML::xmlSApply(xmlchildren[[pubindx]], XML::xmlAttrs)\n # print(a)\n  n <- data.frame(a[c(\"name\", \"age\", \"build\", \"path\"), ])\n  colnames(n) <- paste(getAHGAPubs()[pubindx, \"Publication\"], seq(1:ncol(n)), sep = \".\")\n  u <- data.frame(t(n))\n  l <- strsplit(as.character(u[,\"build\"]),\"\\\\.\")\n  u <- u[which(unlist(lapply(l, `[[`, 1)) %in% build), ]\n  if (nrow(u) > 0) u <- u[sapply(u[, \"age\"], filterDates, dateRange), ]\n  if (paths)\n    return(data.frame(u[, c(\"name\", \"path\", \"age\", \"build\")]))\n  else\n    return(u[, c(\"name\", \"age\", \"build\")])\n}\n\nsampleAttrs <- function() {\n return(names(XML::xmlAttrs(XML::xmlChildren(XML::xmlChildren(XML::xmlRoot(getAHGAXML()))[[1]])[[1]])))\n}\n\n#Gets all samples for a given build\n#' @export getAllSamples\ngetAllSamples <- function(indx = as.numeric(rownames(getAHGAPubs())), build = \"B37\",\n                          ageL = 0, ageH = 99999999, paths = FALSE) {\n  samples <- NULL\n  for (i in indx)\n    samples <- rbind(samples,getSamples(i, build = build, ageL = ageL, ageH = ageH, paths = paths))\n  return(samples)\n}\n\n#Date Range Functions\nsplitDateRange <- function(r) {\n  if (as.character(r) == \"NA\") return(IRanges(0, 0))\n  a <- suppressWarnings(as.numeric(unlist(strsplit(as.character(r), \"-\"))))\n  if (is.na(a[1]))\n    a[1] <- 0\n  end <- start <- a[1]\n  if (length(a) == 2)\n    end <- a[2]\n  if (end <= start) {\n    start <- end\n    end <- a[1]\n  }\n  return(IRanges(start, end))\n}\n\nfilterDates <- function(sample, daterange) {\n  age <- splitDateRange(sample)\n  x <- compare(age, daterange)\n  return (abs(x) <= 4)\n}\n\norderAges <- function(samples, by = \"end\") {\n  ages <- unlist(lapply(samples[, \"age\"],\n          function(x){eval(call(by, splitDateRange(x)))}))\n  return(samples[order(ages), ])\n}\n\n#' @export mkAgeBins\nmkAgeBins <- function(ages) {\n  l <- sapply(ages, splitDateRange)\n  bins <- IRanges::IRanges()\n  for (i in 1:length(l)) {\n    bins <- c(bins, l[[i]])\n  }\n  return(bins)\n}\n\n getBinIndx <- function(age, agebins) {\n   b <- compare(age, agebins)\n   bs <- which(abs(b) <= 4)\n   if (length(bs) == 0)\n     return(0)\n   else\n     return(bs)\n }\n\n getSampleAgeBins <- function(sample_age, agebins) {\n   age <- splitDateRange(sample_age)\n   bindx <- getBinIndx(age, agebins)\n   return(bindx)\n }\n\n#' @export getAgeBinnedSamples\n getAgeBinnedSamples <- function(samples, ages) {\n   agebins <- mkAgeBins(ages)\n   l <- vector(\"list\", length(agebins))\n   for (i in 1:nrow(samples)) {\n     j <- getSampleAgeBins(samples[i, \"age\"], agebins)\n     if (j[1] == 0) next\n     for (k in j) {\n       l[[k]] <- rbind(l[[k]], samples[i, ])\n     }\n   }\n   names(l) <- ages\n   return(l)\n }\n\n getFreq <- function(basecount, anc.der) {\n   f <- c(0, NA)\n\n   #print(basecount)\n   if (!is.null(basecount)) {\n     majmin <- getMajMinAlleles(basecount)\n     e <- 0.001\n     init <- 0.5\n     if (majmin[1] == \"NA\")\n       r <- 0\n     else\n       r <- basecount[, majmin[1]]\n     if (majmin[2] == \"NA\")\n       t <- r\n     else\n       t <- basecount[, majmin[1]] + basecount[, majmin[2]]\n     sampsize <- round(sum(t > 0), 0)\n     nLL <- function(p){\n       -sum(log((p^2) * dbinom(r, size = t, e) + 2 * p * (1 - p)\n       * dbinom(r, size = t, 0.5) + ((1 - p)^2) * dbinom(r, size = t, (1 - e))))\n     }\n     freq <- optim(init, nLL, lower = 0.0000001, upper = 0.9999999, method = \"L-BFGS-B\")\n     if (majmin[1] == anc.der[\"anc\"])\n       f <- c(sampsize, round(freq$par, 3))\n     else if (majmin[1] == anc.der[\"der\"])\n       f <- c(sampsize, 1 - round(freq$par, 3))\n\n   }\n  names(f) <- c(\"N\", anc.der[\"der\"])\n\n   return(f)\n }\n\n #' @export test\n  test <- function(the.snp=\"rs12913832\", build = \"B37\", ageL = 0, ageH = 99999999) {\n    samples <- selectPubs(ageL = ageL, ageH = ageH)\n      #getAllSamples(c(3, 7, 10, 13, 14), build=\"B37\", paths=TRUE)\n     snp <- parseSNPID(the.snp, build)\n    ages <- c(\"1000-3000\",\n              \"3001-4000\",\n              \"4001-5000\",\n              \"5001-6000\",\n              \"6001-7000\",\n              \"7001-8000\",\n              \"8001-21000\",\n              \"21001-999999\")\n    abs <- getAgeBinnedSamples(samples, ages)\n    g <- NULL\n    for (i in 1:length(abs)) {\n      message(paste0(\"\\nprocessing samples in period \", ages[i], \" ...........\\n\"))\n      if (is.null(abs[i][[1]])) {\n        r <- NULL\n        warning(paste0(\"no samples found in period \", ages[i]))\n       }\n      else\n        r <- getSite(abs[i][[1]],snp$chr, snp$pos)\n      if (i == 1) g <- list(r)\n      else\n        g[i] <- list(r)\n    }\n    names(g) <- names(abs)\n    freqs <- lapply(g, getFreq, anc.der = snp$anc.der)\n    #print(freqs)\n    plotf <- sapply(freqs, function(x) {return(x[[2]])})\n    if (sum(!is.na(plotf)) > 0)\n     barplot(plotf, ylim = c(0.0, 1.0), col = \"orange\", cex.names = 0.8, las = 2)\n    attr(g, \"freqs\") <- freqs\n    return(g)\n}\n\n  parseSNPID <- function(snpid, build) {\n    snp <- getSNP(snpid)\n    print(snp)\n    pos <- as.numeric(snp[\"chrom_start\"])\n    chr <- as.character(snp[\"chr_name\"])\n    alleles <- unlist(strsplit(as.character(snp[\"allele\"]), \"/\"))\n    #anc <- as.character(snp[\"allele_1\"])\n\n    anc <- ancestralState(chr, pos, build)\n    #print(\"----------------\")\n    #print(anc)\n    anc.der <- alleles\n\n    #print(anc.der)\n    if (anc %in% alleles)\n      anc.der <- alleles[which(alleles == anc):which(alleles != anc)]\n    names(anc.der) <- c(\"anc\", \"der\")\n    message(paste0(\"snp ID: \", snpid))\n    message(paste0(\"pos B37: \", chr, \":\", pos))\n    message(paste0(\"ancestral: \", anc.der[\"anc\"], \" derived: \", anc.der[\"der\"]))\n    snpinfo <- list(\"snpid\" = snpid, \"chr\" = chr, \"pos\" = pos, \"anc.der\" = anc.der)\n    #print(snpinfo)\n    return(snpinfo)\n }\n\n  getSNP <- function(the.snp = \"rs12913832\", build = \"B37\") {\n    message(paste0(\"looking up SNP \", the.snp, \" in build \", build))\n    snp.db <- biomaRt::useEnsembl(biomart = \"snp\", dataset = \"hsapiens_snp\", GRCh = 37)\n    nt.biomart <- biomaRt::getBM(c(\"refsnp_id\", \"allele\", \"chr_name\", \"chrom_start\",\n\t\t\t\t           \"chrom_strand\", \"allele_1\"),\n\t\t\t\t           filters=\"snp_filter\", values = the.snp, mart = snp.db)\n    return(nt.biomart)\n  }\n\n  ancestralState <- function(chr, pos, build = \"B37\") {\n    strchr <- paste0(\"chr\",as.character(chr))\n    site <- GenomicRanges::GRanges(seqnames = strchr, IRanges::IRanges(pos, pos))\n    server <- \"http://genome-data.cri.uchicago.edu/ahga/\"\n    dir <- \"human_ancestor_GR37_e59/\"\n    if (build == 'B36')\n      dir <- \"Ancestral_hg18/\"\n    prefix <- \"human_ancestor_\"\n    suffix <- \".fa\"\n    fafile=paste0(server, dir,prefix,as.character(chr),suffix)\n    fa <- Rsamtools::FaFile(fafile)\n    a <- Rsamtools::getSeq(fa,param=site)\n    return (as.character(a))\n  }\n\n\n",
    "created" : 1445269674432.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1398964687",
    "id" : "2C5519CD",
    "lastKnownWriteTime" : 1448298615,
    "path" : "C:/Users/dwitonsk/Dropbox/DataViz/ahga.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}