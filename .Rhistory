alleles <- unlist(strsplit(as.character(snp["allele"]), "/"))
#anc <- as.character(snp["allele_1"])
anc <- ancestralState(chr, pos, db = "")
anc.der <- alleles[which(alleles == anc):which(alleles != anc)]
names(anc.der) <- c("anc", "der")
message(paste0("snp ID: ", snpid))
message(paste0("pos B37: ", chr, ":", pos))
message(paste0("ancestral: ", anc.der["anc"], " derived: ", anc.der["der"]))
snpinfo <- list("snpid" = snpid, "chr" = chr, "pos" = pos, "anc.der" = anc.der)
return(snpinfo)
}
getSNP <- function(the.snp = "rs12913832", chr=NULL, pos = NULL, build = "B37") {
message(paste0("looking up SNP ", the.snp, " in build ", build))
####CHANGE BACK TO GRCh=37
snp.db <- biomaRt::useEnsembl(biomart = "snp", dataset = "hsapiens_snp", GRCh=37)
nt.biomart <- biomaRt::getBM(c("refsnp_id", "allele", "chr_name", "chrom_start",
"chrom_strand", "allele_1"),
filters="snp_filter", values = the.snp, mart = snp.db)
return(nt.biomart)
}
flipAllele <- function(allele) {
flip <- "X"
if (allele == "A" || allele == "a")
flip <- "T"
else if (allele == "T" || allele == "t")
flip <- "A"
else if (allele == "G" || allele == "g")
flip <- "C"
else if (allele == "C" || allele == "c")
flip <- "G"
return(flip)
}
testggv <- function() {
server = "popgen.uchicago.edu"
p=suppressWarnings(system2("ping",server,stderr=F,stdout=F))
if (p == 0)
message("GGV server is alive.")
else {
message("GGV server is not responding.")
message(paste0("Please contact: ", maintainer("RGGV")))
}
return(p)
}
ancestralState <- function(chr, pos, db = "") {
strchr <- paste0("chr",as.character(chr))
site <- GenomicRanges::GRanges(seqnames = strchr, IRanges::IRanges(pos, pos))
server <- "http://genome-data.cri.uchicago.edu/ahga/"
dir <- "human_ancestor_GR37_e59/"
if (db == 'hgdp')
dir <- "Ancestral_hg18/"
prefix <- "human_ancestor_"
suffix <- ".fa"
fafile=paste0(server, dir,prefix,as.character(chr),suffix)
fa <- Rsamtools::FaFile(fafile)
a <- Rsamtools::getSeq(fa,param=site)
return (as.character(a))
}
clusterpie <- function(geojson, server = NULL, width = NULL, height = NULL) {
if (is.null(server)) {
data <- geojson
}
# forward options using x
x = list(
geojsonfile = geojson,
data = data,
server = server
)
# create widget
htmlwidgets::createWidget(
name = 'clusterpie4widget',
x,
width = width,
height = height,
package = 'RGGV'
sizingPolicy = htmlwidgets::sizingPolicy(viewer.suppress = TRUE,
knitr.figure = FALSE,
browser.fill = TRUE,
browser.padding = 75,
knitr.defaultWidth = 300,
knitr.defaultHeight = 100)
)
}
# Widget output function for use in Shiny
#
#
clusterpie4widgetOutput <- function(outputId, width = '100%', height = '400px'){
shinyWidgetOutput(outputId, 'clusterpie4widget', width, height, package = 'RGGV')
}
# Widget render function for use in Shiny
#
#
renderClusterpie4widget <- function(expr, env = parent.frame(), quoted = FALSE) {
if (!quoted) { expr <- substitute(expr) } # force quoted
shinyRenderWidget(expr, clusterpie4widgetOutput, env, quoted = TRUE)
}
####################################################
getXML <- function(db = "allpops_auto_maf0.005geno0.1", refresh = FALSE) {
indiv_labelXMLroot <- attr(getXML, "indiv_labelXMLroot")
pop_geoXMLroot <- attr(getXML, "pop_geoXMLroot")
fileURL <- paste("http://genome-data.cri.uchicago.edu/ahga/", db, sep = "")
if (refresh || is.null(indiv_labelXMLroot)) {
indiv_labelXMLfile <- XML::xmlTreeParse(paste(fileURL, ".indiv_label.xml", sep = ""))
pop_geoXMLfile <- XML::xmlTreeParse(paste(fileURL, ".pop_geo.xml", sep = ""))
indiv_labelXMLroot <- XML::xmlRoot(indiv_labelXMLfile)
pop_geoXMLroot <- XML::xmlRoot(pop_geoXMLfile)
}
attr(getXML, "indiv_labelXMLroot") <<- indiv_labelXMLroot
attr(getXML, "pop_geoXMLroot") <<- pop_geoXMLroot
return(list(indiv_labelXMLroot, pop_geoXMLroot))
}
getPopLevels <- function(refresh = FALSE) {
plevels <- attr(getPopLevels, "plevelAttr")
if (is.null(plevels) || refresh) {
res <- getXML()
plevels <- length(XML::getNodeSet(XML::getNodeSet(res[[1]], "//Sample")[[1]], "//Population"))
}
attr(getPopLevels, "plevelAttr") <<- plevels
return (plevels)
}
getSamples <- function(refresh = FALSE) {
samp_pops <- attr(getSamples, "sampAttr")
if (is.null(samp_pops) || refresh) {
res <- getXML()
plevels <- getPopLevels(refresh)
samp_ids <- sapply(XML::getNodeSet(res[[1]], "//Label"), function(x){XML::xmlValue(x)})
samp_pops <- NULL
for (i in 1:plevels) {
path <- paste("//Sample/Population[@level='",i,"']", sep = "")
p <- sapply(XML::getNodeSet(res[[1]], path), function(x){XML::xmlValue(x)})
samp_pops <- cbind(samp_pops, p)
}
colnames(samp_pops) <- paste("pop_level", 1:plevels, sep = "")
rownames(samp_pops) <- samp_ids
attr(getSamples, "sampAttr") <<- samp_pops
}
return(samp_pops)
}
getCoords <- function() {
res <- getXML()
c <- res[[2]]$children
pop_names <- sapply(c, function(x){XML::xmlValue(x[["PopLabel"]])})
pop_lats <- as.numeric(sapply(c, function(x){XML::xmlValue(x[["Latitude"]])}))
pop_longs <- as.numeric(sapply(c, function(x){XML::xmlValue(x[["Longitude"]])}))
coords <- rbind(pop_lats, pop_longs)
rownames(coords) <- c("lat", "long")
colnames(coords) <- pop_names
return(coords)
}
#' @export testVCF
testVCF <- function(snpid = NULL, chr, pos) {
snp <- NULL
if (!is.null(snpid))
snp = parseSNPID(snpid)
else {
snpid = paste0(chr, ":", pos)
snp$chr <- chr
snp$pos <- pos
}
chrom = paste("chr", snp$chr, sep = "")
tbx <- Rsamtools::TabixFile("http://genome-data.cri.uchicago.edu/ahga/archdata/allpops_auto_maf0.005geno0.1.vcf.gz")
param <- GenomicRanges::GRanges(chrom, IRanges::IRanges(snp$pos, width=1))
res <- Rsamtools::scanTabix(tbx, param=param)
if (length(res[[1]]) == 0) {
stop(paste0("SNP ", snpid, " not in database."), call. = FALSE)
}
#print(res)
r2=gsub("1/1","2",res)
r2=gsub("1/0","1",r2)
r2=gsub("0/1","1",r2)
r2=gsub("0/0","0",r2)
r2=gsub("./.","NA",r2)
vcf=read.csv(textConnection(r2[[1]]),sep="\t",header=F)
colnames(vcf) = unlist(parseVCFHeader(tbx))
attr(getVCF, "vcfAttr") <<- vcf
s=getSamples()
genos=vcf[1,rownames(s)]
k=data.frame(s, t(genos), stringsAsFactors = TRUE)
cols = colnames(k)
cols[length(cols)]= "Genotype"
colnames(k)=cols
geojson <- buildGeojson(k, getCoords(), snpid)
clusterpie(geojson)
#print(geojson)
#return(k)
}
getVCF <- function() {
vcf <- attr(getVCF, "vcfAttr")
return(vcf)
}
parseAlleles <- function(vcf = getVCF()) {
alleles <- vcf[c("REF", "ALT")]
print(alleles)
}
parseVCFHeader <- function(tbx) {
header <- attr(parseVCFHeader, "headerAttr")
tbxAttr <- attr(parseVCFHeader, "tbxAttr")
if (is.null(header) || is.null(tbxAttr) || !identical(tbxAttr, tbx)) {
h <- Rsamtools::headerTabix(tbx)[["header"]]
header <- read.csv(textConnection(h[length(h)]), sep = "\t", header = FALSE)
attr(parseVCFHeader, "headerAttr") <<- header
attr(parseVCFHeader, "tbxAttr") <<- tbx
}
return(header)
}
buildGeojson <- function(samp_data, coords, snpid) {
ancder = c("Ancestral", "Derived")
names(ancder) = c("A", "G")
rs = snpid
pname = "1kgenome_imputed_HGDP"
geom <- NULL
alleles <- parseAlleles()
poplevlist <- NULL
for (i in 1:getPopLevels())
poplevlist[[length(poplevlist)+1]] <- paste0("pop_level", as.character(i))
poplev <- select.list(poplevlist)
for (i in 1:nrow(samp_data)) {
al <- alleles
id <- rownames(samp_data[i,])
pop <- as.character(samp_data[i, poplev])
lat <- coords["lat", pop]
lon <- coords["long", pop]
#c <- paste("[", lon, ",", lat, "]")
c <- c(lon, lat)
gen <- samp_data[i, "Genotype"]
if (is.na(gen)) next
if (gen == 2)
al["REF"] <- al["ALT"]
else if (gen == 0)
al["ALT"] <- al["REF"]
g <- list(geometry=list(type="Point",coordinates = c), type="Feature", properties=c(id=id,popname=pop,allele=as.character(al[1, 1])))
geom[[length(geom)+1]] <- g
g <- list(geometry=list(type="Point",coordinates = c), type="Feature", properties=c(id=id,popname=pop,allele=as.character(al[1, 2])))
geom[[length(geom)+1]] <- g
}
geojson <- list(type="FeatureCollection", features=geom,
properties=list(fields=list(allele=list(lookup=ancder, name="Ancestral State"),
popname=pname, attribution="XXXXX", description=rs)))
return(RJSONIO::toJSON(geojson))
}
freqTable <- function(samp_data, level = 1) {
if (level > getPopLevels()) {
stop(paste0("The level exceeds the number of population levels (", getPopLevels(),")."), call. = FALSE)
}
lev <- paste("pop_level", level, sep = "")
num <- tapply(samp_data$Genotype, samp_data[[lev]], sum, na.rm = TRUE)
denom <- tapply(samp_data$Genotype, samp_data[[lev]], function(x){return(2*sum(!is.na(x)))})
return (num/denom)
}
testseasonAve <- function(var='air.sig995', level="surface", season="winter", ext='min', hemi="south") {
vardata=NCEP.gather(variable=var,level=level,years.minmax=c(1960,1960),lat.southnorth=c(-70,77.5),lon.westeast=c(0,360),reanalysis2 = F,status.bar=F,months.minmax=c(1,12))
lat=as.numeric(dimnames(vardata)[[1]])
latS <- which(lat < 0)
latN <- which(lat >= 0)
var_S_D=NCEP.aggregate(vardata[latS,,],HOURS = FALSE, fxn=ext)
var_S_MAve=NCEP.aggregate(var_S_D,DAYS=FALSE,HOURS=FALSE, fxn="mean")
var_S_MAve=NCEP.aggregate(var_S_MAve,DAYS=FALSE,HOURS=FALSE, fxn="mean")
var_S_MAve=NCEP.aggregate(var_S_MAve,YEARS=FALSE,DAYS=FALSE,HOURS=FALSE, fxn="mean")
var_N_D=NCEP.aggregate(vardata[latN,,],HOURS = FALSE, fxn=ext)
var_N_MAve=NCEP.aggregate(var_N_D,DAYS=FALSE,HOURS=FALSE, fxn="mean")
var_N_MAve=NCEP.aggregate(var_N_MAve,DAYS=FALSE,HOURS=FALSE, fxn="mean")
var_N_MAve=NCEP.aggregate(var_N_MAve,YEARS=FALSE,DAYS=FALSE,HOURS=FALSE, fxn="mean")
mnthS=c(6,7,8)
mnthN=c(1,2,12)
if (season=="summer") {
mnthS=c(1,2,12)
mnthN=c(6,7,8)
}
return(NCEP.aggregate(var_S_MAve[,,mnthS],YEARS=FALSE,MONTHS=F,DAYS=FALSE,HOURS = FALSE, fxn="mean"))
}
#' Map NCEP-NCAR environmental data
#'
#' @description
#' Creates a choropleth map displaying seasonal
#' environmental data
#'
#' @details
#' Creates a choropleth map displaying seasonal environmental data from the NCEP-NCAR database.
#'
#' @param envvar Enviornmental variable name (string)
#' @param season Season [winter|summer] (string)
#' @param level Data level (string)
#' @param ext Function for aggregating data ['min'|'max'|'mean'] (string)
#' @examples
#' envmap()
#' envmap(season="summer")
#' envmap(envvar='dswrf.surface',season='winter',level='gaussian',ext='max')
#' @export envmap
envmap <- function(grid, interior=FALSE, ncol=18) {
library(maps)
sgdf <- sgdf(grid)
sp::plot(sgdf, main=grid$var, col=sp::bpy.colors(ncol))
maps::map("world", bg="blue", add=TRUE, interior=interior,ylim=c(sp::bbox(sgdf)[2,"min"],sp::bbox(sgdf)[2,"max"]))
}
#' Add allele frequency pie charts to choropleth map
#'
#' @description
#' \code{addpie} Adds allele frequency pie charts for all populations in the
#'  frequency dataframe.
#'
#' @details
#' Adds allele frequency pie charts for all populations in the frequency dataframe.
#'
#' @param f Allele frequency table generated by ggv() (dataframe)
#' @param radius Radius for pie charts. (numeric)
#' @examples
#' freq_table <- ggv()
#' grid <- seasonAve()
#' envmap(grid)
#' addpie(freq_table)
#' @export addpie
addpie <- function(f, radius=4) {
i = 1
f2 <- f[order(f$long),]
prevlong = -9999
prevlat = -9999
while (i < nrow(f)) {
currlong = f2[i,"long"]
currlat = f2[i,"lat"]
if (sqrt((currlong - prevlong)^2 + (currlat - prevlat)^2) < 2*radius)
currlong <- prevlong + 2*radius
mapplots::add.pie(z=c(f2[i,5],1 - f2[i,5]), x=currlong, y=f2[i,"lat"],radius=radius,col=c("black","white"),labels="")
i <- i+1
prevlong <- currlong
prevlat <- currlat
}
}
#' @export seasonAve
seasonAve <- function(var='air.sig995', season="winter", level='surface', ext='min', savedata = TRUE) {
datafile=paste0(var,"_",level,".Rdata")
if (file.exists(datafile)) {
load(datafile)
}
else {
vardata=RNCEP::NCEP.gather(variable=var,level=level,years.minmax=c(1960,1960),lat.southnorth=c(-80,80),lon.westeast=c(-179,180),reanalysis2 = F,status.bar=F,months.minmax=c(1,12))
if (savedata) save(vardata, file=datafile)
}
lat=as.numeric(dimnames(vardata)[[1]])
latS <- which(lat < 0)
latN <- which(lat >= 0)
var_S_D <- RNCEP::NCEP.aggregate(vardata[latS,,],HOURS = FALSE, fxn=ext)
var_S_MAve <- RNCEP::NCEP.aggregate(var_S_D,DAYS=FALSE,HOURS=FALSE, fxn="mean")
var_S_MAve <- RNCEP::NCEP.aggregate(var_S_MAve,DAYS=FALSE,HOURS=FALSE, fxn="mean")
var_S_MAve <- RNCEP::NCEP.aggregate(var_S_MAve,YEARS=FALSE,DAYS=FALSE,HOURS=FALSE, fxn="mean")
var_N_D <- RNCEP::NCEP.aggregate(vardata[latN,,],HOURS = FALSE, fxn=ext)
var_N_MAve <- RNCEP::NCEP.aggregate(var_N_D,DAYS=FALSE,HOURS=FALSE, fxn="mean")
var_N_MAve <- RNCEP::NCEP.aggregate(var_N_MAve,DAYS=FALSE,HOURS=FALSE, fxn="mean")
var_N_MAve <- RNCEP::NCEP.aggregate(var_N_MAve,YEARS=FALSE,DAYS=FALSE,HOURS=FALSE, fxn="mean")
mnthS=c(6,7,8)
mnthN=c(1,2,12)
if (season=="summer") {
mnthS=c(1,2,12)
mnthN=c(6,7,8)
}
var_S_MAve <- RNCEP::NCEP.array2df(RNCEP::NCEP.aggregate(var_S_MAve[,,mnthS],YEARS=FALSE,MONTHS=F,DAYS=FALSE,HOURS = FALSE, fxn="mean"))[,2:4]
var_N_MAve <- RNCEP::NCEP.array2df(RNCEP::NCEP.aggregate(var_N_MAve[,,mnthN],YEARS=FALSE,MONTHS=F,DAYS=FALSE,HOURS = FALSE, fxn="mean"))[,2:4]
mat=rbind(var_S_MAve,var_N_MAve)
#setorderv(mat,c("latitude","longitude"),order=c(-1,1))
mat <- mat[order(-mat$latitude, mat$longitude),]
mat <- unique(mat)
longgridres <- 2*length(unique(mat$longitude))
latgridres <- 2*length(unique(mat$latitude))
t=tgp::interp.loess(mat[,"longitude"],mat[,"latitude"],mat[,"variable1"],gridlen=c(longgridres,latgridres),span=.001)
t=c(t,"var"=paste0(var,"_",season,"_",ext))
return(t)
}
sgdf <- function(t) {
sg=sp::SpatialGrid(sp::GridTopology(c(min(t$x),min(t$y)), c(t$x[2]-t$x[1],t$y[2]-t$y[1]), c(length(t$x), length(t$y))),proj4string=sp::CRS("+proj=longlat"))
m=t$z[,rev(seq_len(ncol(t$z)))]
dim(m)<-c(length(m),1)
sgdf=sp::SpatialGridDataFrame(grid=sg,data=as.data.frame(m))
# sg=SpatialGrid(points2grid(mat),proj4string=CRS("+proj=longlat"))
#  sgdf=SpatialGridDataFrame(grid=sg,data=as.data.frame(mat$variable1))
return(sgdf)#'
}
#' @export interpvar
interpvar <- function(t,f) {
longv <- sapply(f$long,nearestLong,t=t)
latv <- sapply(f$lat, nearestLat,t=t)
variable1 <- t$z[cbind(longv,latv)]
f <- cbind(f, variable1)
names(f)[length(f)] <- t$var
return(f)
}
nearestLat <- function(t, lat) {
return(which.min(abs(t$y-lat)))
}
nearestLong <- function(t, long) {
return(which.min(abs(t$x-long)))
}
ggv()
unlink('vignettes/RGGV_Usage_cache', recursive = TRUE)
clusterpie
clusterpie <- function(geojson, server = NULL, width = NULL, height = NULL) {
if (is.null(server)) {
data <- geojson
}
# forward options using x
x = list(
geojsonfile = geojson,
data = data,
server = server
)
# create widget
htmlwidgets::createWidget(
name = 'clusterpie4widget',
x,
width = width,
height = height,
package = 'RGGV'
sizingPolicy = htmlwidgets::sizingPolicy(viewer.suppress = TRUE,
knitr.figure = FALSE,
browser.fill = TRUE,
browser.padding = 75,
knitr.defaultWidth = 300,
knitr.defaultHeight = 100)
)
}
clusterpie <- function(geojson, server = NULL, width = NULL, height = NULL) {
if (is.null(server)) {
data <- geojson
}
# forward options using x
x = list(
geojsonfile = geojson,
data = data,
server = server
)
# create widget
htmlwidgets::createWidget(
name = 'clusterpie4widget',
x,
width = width,
height = height,
package = 'RGGV',
sizingPolicy = htmlwidgets::sizingPolicy(viewer.suppress = TRUE,
knitr.figure = FALSE,
browser.fill = TRUE,
browser.padding = 75,
knitr.defaultWidth = 300,
knitr.defaultHeight = 100)
)
}
unlink('vignettes/RGGV_Usage_cache', recursive = TRUE)
ggv()
clusterpie <- function(geojson, server = NULL, width = NULL, height = NULL) {
if (is.null(server)) {
data <- geojson
}
# forward options using x
x = list(
geojsonfile = geojson,
data = data,
server = server
)
# create widget
htmlwidgets::createWidget(
name = 'clusterpie4widget',
x,
width = width,
height = height,
package = 'RGGV',
sizingPolicy = htmlwidgets::sizingPolicy(viewer.suppress = TRUE,
knitr.figure = FALSE,
browser.fill = TRUE,
browser.padding = 0,
knitr.defaultWidth = 300,
knitr.defaultHeight = 100)
)
}
ggv()
unlink('vignettes/RGGV_Usage_cache', recursive = TRUE)
clusterpie <- function(geojson, server = NULL, width = NULL, height = NULL) {
if (is.null(server)) {
data <- geojson
}
# forward options using x
x = list(
geojsonfile = geojson,
data = data,
server = server
)
# create widget
htmlwidgets::createWidget(
name = 'clusterpie4widget',
x,
width = width,
height = height,
package = 'RGGV',
sizingPolicy = htmlwidgets::sizingPolicy(viewer.suppress = TRUE,
knitr.figure = FALSE,
browser.fill = TRUE,
browser.padding = 0,
knitr.defaultWidth = 30,
knitr.defaultHeight = 10)
)
}
unlink('vignettes/RGGV_Usage_cache', recursive = TRUE)
remove.packages("RGGV")
install.packages(repos=NULL, "/Users/dwitonsk/Dropbox/RGGV")
install.packages(repos=NULL, "/Users/David/Dropbox/RGGV")
?install.packages
install.packages(repos=NULL, "/Users/David/Dropbox/RGGV",type="source")
librar(RGGV)
library(RGGV)
ggv
clusterpie
unlink('vignettes/RGGV_Usage_cache', recursive = TRUE)
library(RGGV)
remove.packages("RGGV")
library(RGGV)
ggv()
clusterpie
